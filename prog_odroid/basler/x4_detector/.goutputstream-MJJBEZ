#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"
#include <pylon/PylonIncludes.h>
#include <pylon/usb/BaslerUsbCamera.h>
#include <stdlib.h>
#include <stdio.h>
#include <queue>

using namespace cv;
using namespace Pylon;
using namespace std;

// Header for HarrisCorner function
void calculate_corner(Mat*,int,Mat*);

// Number of images to be grabbed.
static const uint32_t c_countOfImagesToGrab = 100;

// Threshold for Harris Corner Detection
int harris_threshold = 200;

int main(int argc, char* argv[])
{
    // The exit code of the sample application.
    int exitCode = 0;

	// Path name for recorded images and index
	String_t path_rec_img("results/rec");
	char str_buffer[100];
	int num_img = 0;
	queue<CPylonImage> ptrGrabResultList;
	CPylonImage pylonImg;

    // Before using any pylon methods, the pylon runtime must be initialized. 
    PylonInitialize();

    try
    {
        // Create an instant camera object with the camera device found first, get parameters and open camera
        CInstantCamera camera(CTlFactory::GetInstance().CreateFirstDevice());
		GenApi::INodeMap& nodemap = camera.GetNodeMap();
		camera.Open();

        // Print the model name of the camera.
        cout << "Using device " << camera.GetDeviceInfo().GetModelName() << endl;

		// Camera parameters
		camera.MaxNumBuffer = 5;
		GenApi::CIntegerPtr width = nodemap.GetNode("Width");
		GenApi::CIntegerPtr height = nodemap.GetNode("Height");
		GenApi::CIntegerPtr offsetX = nodemap.GetNode("OffsetX");
		GenApi::CIntegerPtr offsetY = nodemap.GetNode("OffsetY");
		GenApi::CBooleanPtr reverseY = nodemap.GetNode("ReverseY");

width->SetValue(800); 
		//camera.OffsetX = 400;
		//camera.Height = 600; camera.OffsetY = 300;
		//camera.ReverseY = true;

		// Image saving
/*		while (!ptrGrabResultList.empty())
		{
			cout << "Image " << num_img+1 << "/" << c_countOfImagesToGrab << endl;
			pylonImg = ptrGrabResultList.front();
			ptrGrabResultList.pop();
			sprintf(str_buffer,"results/rec%d.png",num_img++);
			pylonImg.Save(ImageFileFormat_Png,str_buffer);
			sprintf(str_buffer,"results/rec%d.raw",num_img);
			pylonImg.Save(ImageFileFormat_Raw,str_buffer);
		}*/

		camera.Close();
    }
    catch (const GenericException &e)
    {
        // Error handling.
        cerr << "An exception occurred." << endl
        << e.GetDescription() << endl;
        exitCode = 1;
    }

    // Comment the following two lines to disable waiting on exit.
    cerr << endl << "Press Enter to exit." << endl;
    while( cin.get() != '\n');
	
    // Releases all pylon resources. 
    PylonTerminate();  

    return exitCode;
}

void calculate_corner(Mat *p_src, int thresh, Mat *p_dst)
{
  Mat dst, dst_norm;
  dst = Mat::zeros( p_src->size() , CV_32FC1 );

  /// Detector parameters
  int blockSize = 2;
  int apertureSize = 3;
  double k = 0.04;

  /// Detecting corners
  cornerHarris( *p_src, dst, blockSize, apertureSize, k, BORDER_DEFAULT );

  /// Normalizing
  normalize( dst, dst_norm, 0, 255, NORM_MINMAX, CV_32FC1, Mat() );
  convertScaleAbs( dst_norm, *p_dst );

  /// Drawing a circle around corners
  for( int j = 0; j < dst_norm.rows ; j++ )
     {
		for( int i = 0; i < dst_norm.cols; i++ )
          {
            if( (int) dst_norm.at<float>(j,i) > thresh )
              {
               circle( *p_dst, Point( i, j ), 5,  Scalar(0), 2, 8, 0 );
              }
          }
     }
}
